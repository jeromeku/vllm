// Build command
// bin2c vector_add.{ptx/cubin/fatbin}

// Using CUDA driver API is sufficient.
#include <cuda.h>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>

// #include "vector_add_ptx_cubin_fatbin_sm86.hpp"
// extern unsigned char vector_add_int_ptx[];
extern unsigned char const vector_add_cubin[];
// extern unsigned char vector_add_int_fatbin[];

unsigned char const vector_add_cubin[] = {
0x7f,0x45,0x4c,0x46,0x02,0x01,0x01,0x33,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0x00,0xbe,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x30,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x09,0x00,0x00,0x00,0x00,0x00,0x00,
0x5a,0x05,0x5a,0x00,0x40,0x00,0x38,0x00,0x05,0x00,0x40,0x00,0x0c,0x00,0x01,0x00,
0x00,0x2e,0x73,0x68,0x73,0x74,0x72,0x74,0x61,0x62,0x00,0x2e,0x73,0x74,0x72,0x74,
0x61,0x62,0x00,0x2e,0x73,0x79,0x6d,0x74,0x61,0x62,0x00,0x2e,0x73,0x79,0x6d,0x74,
0x61,0x62,0x5f,0x73,0x68,0x6e,0x64,0x78,0x00,0x2e,0x6e,0x76,0x2e,0x69,0x6e,0x66,
0x6f,0x00,0x2e,0x74,0x65,0x78,0x74,0x2e,0x76,0x65,0x63,0x74,0x6f,0x72,0x5f,0x61,
0x64,0x64,0x00,0x2e,0x6e,0x76,0x2e,0x69,0x6e,0x66,0x6f,0x2e,0x76,0x65,0x63,0x74,
0x6f,0x72,0x5f,0x61,0x64,0x64,0x00,0x2e,0x6e,0x76,0x2e,0x73,0x68,0x61,0x72,0x65,
0x64,0x2e,0x76,0x65,0x63,0x74,0x6f,0x72,0x5f,0x61,0x64,0x64,0x00,0x2e,0x6e,0x76,
0x2e,0x73,0x68,0x61,0x72,0x65,0x64,0x2e,0x72,0x65,0x73,0x65,0x72,0x76,0x65,0x64,
0x2e,0x30,0x00,0x2e,0x64,0x65,0x62,0x75,0x67,0x5f,0x66,0x72,0x61,0x6d,0x65,0x00,
0x2e,0x72,0x65,0x6c,0x2e,0x64,0x65,0x62,0x75,0x67,0x5f,0x66,0x72,0x61,0x6d,0x65,
0x00,0x2e,0x72,0x65,0x6c,0x61,0x2e,0x64,0x65,0x62,0x75,0x67,0x5f,0x66,0x72,0x61,
0x6d,0x65,0x00,0x2e,0x6e,0x76,0x2e,0x63,0x61,0x6c,0x6c,0x67,0x72,0x61,0x70,0x68,
0x00,0x2e,0x6e,0x76,0x2e,0x70,0x72,0x6f,0x74,0x6f,0x74,0x79,0x70,0x65,0x00,0x2e,
0x6e,0x76,0x2e,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x30,0x2e,0x76,0x65,0x63,
0x74,0x6f,0x72,0x5f,0x61,0x64,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x2e,0x73,0x68,0x73,0x74,0x72,0x74,0x61,0x62,0x00,0x2e,0x73,0x74,
0x72,0x74,0x61,0x62,0x00,0x2e,0x73,0x79,0x6d,0x74,0x61,0x62,0x00,0x2e,0x73,0x79,
0x6d,0x74,0x61,0x62,0x5f,0x73,0x68,0x6e,0x64,0x78,0x00,0x2e,0x6e,0x76,0x2e,0x69,
0x6e,0x66,0x6f,0x00,0x2e,0x74,0x65,0x78,0x74,0x2e,0x76,0x65,0x63,0x74,0x6f,0x72,
0x5f,0x61,0x64,0x64,0x00,0x2e,0x6e,0x76,0x2e,0x69,0x6e,0x66,0x6f,0x2e,0x76,0x65,
0x63,0x74,0x6f,0x72,0x5f,0x61,0x64,0x64,0x00,0x2e,0x6e,0x76,0x2e,0x73,0x68,0x61,
0x72,0x65,0x64,0x2e,0x76,0x65,0x63,0x74,0x6f,0x72,0x5f,0x61,0x64,0x64,0x00,0x2e,
0x6e,0x76,0x2e,0x72,0x65,0x73,0x65,0x72,0x76,0x65,0x64,0x53,0x6d,0x65,0x6d,0x2e,
0x6f,0x66,0x66,0x73,0x65,0x74,0x30,0x00,0x2e,0x6e,0x76,0x2e,0x73,0x68,0x61,0x72,
0x65,0x64,0x2e,0x72,0x65,0x73,0x65,0x72,0x76,0x65,0x64,0x2e,0x30,0x00,0x5f,0x5f,
0x6e,0x76,0x5f,0x72,0x65,0x73,0x65,0x72,0x76,0x65,0x64,0x53,0x4d,0x45,0x4d,0x5f,
0x6f,0x66,0x66,0x73,0x65,0x74,0x5f,0x30,0x5f,0x61,0x6c,0x69,0x61,0x73,0x00,0x2e,
0x64,0x65,0x62,0x75,0x67,0x5f,0x66,0x72,0x61,0x6d,0x65,0x00,0x2e,0x72,0x65,0x6c,
0x2e,0x64,0x65,0x62,0x75,0x67,0x5f,0x66,0x72,0x61,0x6d,0x65,0x00,0x2e,0x72,0x65,
0x6c,0x61,0x2e,0x64,0x65,0x62,0x75,0x67,0x5f,0x66,0x72,0x61,0x6d,0x65,0x00,0x2e,
0x6e,0x76,0x2e,0x63,0x61,0x6c,0x6c,0x67,0x72,0x61,0x70,0x68,0x00,0x2e,0x6e,0x76,
0x2e,0x70,0x72,0x6f,0x74,0x6f,0x74,0x79,0x70,0x65,0x00,0x76,0x65,0x63,0x74,0x6f,
0x72,0x5f,0x61,0x64,0x64,0x00,0x2e,0x6e,0x76,0x2e,0x63,0x6f,0x6e,0x73,0x74,0x61,
0x6e,0x74,0x30,0x2e,0x76,0x65,0x63,0x74,0x6f,0x72,0x5f,0x61,0x64,0x64,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x03,0x00,0x09,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x6d,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,0x20,0xa0,0x0a,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xbd,0x00,0x00,0x00,0x03,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xed,0x00,0x00,0x00,0x03,0x00,0x07,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x09,0x01,0x00,0x00,0x12,0x10,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x01,0x00,0x00,0x03,0x00,0x0b,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xff,0xff,0xff,0xff,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x03,0x00,0x04,0x7c,0xff,0xff,0xff,0xff,0x0f,0x0c,0x81,0x80,
0x80,0x28,0x00,0x08,0xff,0x81,0x80,0x28,0x08,0x81,0x80,0x80,0x28,0x00,0x00,0x00,
0xff,0xff,0xff,0xff,0x2c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x0c,0x81,0x80,0x80,0x28,0x00,0x04,
0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x2f,0x08,0x00,0x06,0x00,0x00,0x00,
0x12,0x00,0x00,0x00,0x04,0x11,0x08,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x04,0x12,0x08,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x37,0x04,0x00,
0x80,0x00,0x00,0x00,0x04,0x17,0x0c,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x18,0x00,
0x00,0xf0,0x11,0x00,0x04,0x17,0x0c,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x10,0x00,
0x00,0xf0,0x21,0x00,0x04,0x17,0x0c,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x08,0x00,
0x00,0xf0,0x21,0x00,0x04,0x17,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xf0,0x21,0x00,0x03,0x50,0x00,0x00,0x03,0x1b,0xff,0x00,0x04,0x1c,0x08,0x00,
0x70,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x04,0x1e,0x04,0x00,0x00,0x00,0x00,0x00,
0x03,0x19,0x1c,0x00,0x04,0x0a,0x08,0x00,0x07,0x00,0x00,0x00,0x10,0x02,0x1c,0x00,
0x04,0x36,0x04,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xfd,0xff,0xff,0xff,
0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x82,0x7b,0x01,0xff,0x00,0x0a,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x22,0x0e,0x00,
0x19,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x62,0x0e,0x00,
0xb9,0x7a,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xe2,0x0f,0x00,
0xb9,0x7a,0x08,0x00,0x00,0x8a,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xe2,0x0f,0x00,
0x19,0x79,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x64,0x0e,0x00,
0x24,0x7c,0x00,0x00,0x04,0x00,0x00,0x00,0x03,0x02,0x8e,0x0f,0x00,0xca,0x2f,0x00,
0x0c,0x7c,0x00,0x00,0x08,0x00,0x00,0x00,0x70,0x60,0xf0,0x0b,0x00,0xda,0x0f,0x00,
0x4d,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0xea,0x1f,0x00,
0x82,0x7b,0x08,0xff,0x00,0x84,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x22,0x0e,0x00,
0xb9,0x7a,0x05,0x00,0x00,0x03,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xe2,0x0f,0x00,
0xb9,0x7a,0x06,0x00,0x00,0x82,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0xe2,0x0f,0x00,
0xa4,0x72,0x04,0x04,0x05,0x00,0x00,0x00,0x3f,0x02,0x8e,0x0f,0x00,0xca,0x0f,0x00,
0x82,0x7b,0x0a,0xff,0x00,0x86,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x70,0x0e,0x00,
0x82,0x7b,0x0c,0xff,0x00,0x88,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0xa4,0x0e,0x00,
0x25,0x78,0x02,0x00,0x04,0x00,0x00,0x00,0x08,0x00,0x8e,0x07,0x00,0xc8,0x1f,0x00,
0x25,0x78,0x04,0x00,0x04,0x00,0x00,0x00,0x0a,0x00,0x8e,0x07,0x00,0xe4,0x2f,0x04,
0x81,0x79,0x03,0x02,0x06,0x00,0x00,0x00,0x00,0x19,0x1e,0x0c,0x00,0xe8,0x8e,0x00,
0x81,0x79,0x04,0x04,0x06,0x00,0x00,0x00,0x00,0x19,0x1e,0x0c,0x00,0xe2,0x0e,0x00,
0x25,0x78,0x06,0x00,0x04,0x00,0x00,0x00,0x0c,0x00,0x8e,0x07,0x00,0xe2,0x4f,0x04,
0x10,0x7c,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xe0,0xff,0x0f,0x00,0xc8,0x0f,0x00,
0x0c,0x7c,0x00,0x00,0x08,0x00,0x00,0x00,0x70,0x60,0xf0,0x0b,0x00,0xe4,0x0f,0x00,
0x10,0x72,0x0f,0x04,0x03,0x00,0x00,0x00,0xff,0xe0,0xff,0x07,0x00,0xca,0x8f,0x00,
0x86,0x79,0x00,0x06,0x0f,0x00,0x00,0x00,0x06,0x19,0x10,0x0c,0x00,0xec,0x07,0x00,
0x47,0x89,0xd8,0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0x83,0x03,0x00,0xea,0x0f,0x00,
0x4d,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0xea,0x0f,0x00,
0x47,0x79,0xfc,0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0x83,0x03,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x18,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xe8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0b,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x2d,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x13,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x83,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x29,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x43,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcc,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xb3,0x00,0x00,0x00,0x01,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xa1,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x68,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x32,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x6d,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xcf,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
0x2c,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x30,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
0x30,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x80,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x2c,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x2c,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

#define CHECK_CUDA_DRIVER_ERROR(val)                                           \
    check_driver((val), #val, __FILE__, __LINE__)
void check_driver(CUresult err, char const* func, char const* file, int line)
{
    if (err != CUDA_SUCCESS)
    {
        std::cerr << "CUDA Driver Error at: " << file << ":" << line
                  << std::endl;
        char const* err_string{nullptr};
        std::cerr << cuGetErrorString(err, &err_string) << std::endl;
        std::cerr << err_string << " " << func << std::endl;
        std::exit(EXIT_FAILURE);
    }
}

int main(int argc, char** argv)
{
    // The user can specify whether to use the PTX, CUBIN, or FATBIN bytes.
    if (argc != 2)
    {
        std::cerr << "Usage: " << argv[0] << " ptx|cubin|fatbin" << std::endl;
        return 1;
    }

    // CUDA device 0 is used.
    CUdevice cuda_device{0};
    CUfunction vector_add_kernel{};
    CUmodule cuda_module{};
    CUcontext cuda_context{};
    CUstream cuda_stream{};

    // Currently, this flag must be 0.
    unsigned int const cuda_driver_init_flags{0};
    // Initialize the CUDA driver API.
    CHECK_CUDA_DRIVER_ERROR(cuInit(cuda_driver_init_flags));
    // Currently, this flag must be 0.
    unsigned int const cuda_context_init_flags{0};
    // Create a CUDA context.
    CHECK_CUDA_DRIVER_ERROR(
        cuCtxCreate(&cuda_context, cuda_context_init_flags, cuda_device));
    // Create a CUDA stream.
    CHECK_CUDA_DRIVER_ERROR(
        cuStreamCreate(&cuda_stream, CU_STREAM_NON_BLOCKING));

    // Create a CUDA module from the text string.
    if (std::string{argv[1]} == "cubin")
    {
        CHECK_CUDA_DRIVER_ERROR(cuModuleLoadData(
            &cuda_module, static_cast<void const*>(vector_add_cubin)));
    }
    // else if (std::string{argv[1]} == "cubin")
    // {
    //     CHECK_CUDA_DRIVER_ERROR(cuModuleLoadData(
    //         &cuda_module, static_cast<void const*>(vector_add_int_cubin)));
    // }
    // else if (std::string{argv[1]} == "fatbin")
    // {
    //     CHECK_CUDA_DRIVER_ERROR(cuModuleLoadData(
    //         &cuda_module, static_cast<void const*>(vector_add_int_fatbin)));
    // }
    else
    {
        std::cerr << "Error: The byte type is not supported." << std::endl;
        return 1;
    }

    // Get the CUDA kernel function from the CUDA module.
    CHECK_CUDA_DRIVER_ERROR(
        cuModuleGetFunction(&vector_add_kernel, cuda_module, "vector_add"));
    
    // The number of elements in the vectors.
    unsigned int num_elements{8192};

    std::vector<int> host_vector_a(num_elements, 1);
    std::vector<int> host_vector_b(num_elements, 2);
    std::vector<int> host_vector_c(num_elements, -1);
    std::vector<int> host_vector_c_reference(num_elements, -2);
    // Initialize the input vectors.
    for (size_t i{0}; i < num_elements; ++i)
    {
        host_vector_a.at(i) = i;
        host_vector_b.at(i) = i;
    }
    // Compute the reference result.
    for (size_t i{0}; i < num_elements; ++i)
    {
        host_vector_c_reference.at(i) =
            host_vector_a.at(i) + host_vector_b.at(i);
    }

    // Allocate device memory for the input vectors.
    CUdeviceptr device_vector_a{};
    CUdeviceptr device_vector_b{};
    CUdeviceptr device_vector_c{};
    CHECK_CUDA_DRIVER_ERROR(
        cuMemAlloc(&device_vector_a, num_elements * sizeof(int)));
    CHECK_CUDA_DRIVER_ERROR(
        cuMemAlloc(&device_vector_b, num_elements * sizeof(int)));
    CHECK_CUDA_DRIVER_ERROR(
        cuMemAlloc(&device_vector_c, num_elements * sizeof(int)));

    // Copy the input vectors from the host to the device.
    CHECK_CUDA_DRIVER_ERROR(cuMemcpyHtoD(device_vector_a, host_vector_a.data(),
                                         num_elements * sizeof(int)));
    CHECK_CUDA_DRIVER_ERROR(cuMemcpyHtoD(device_vector_b, host_vector_b.data(),
                                         num_elements * sizeof(int)));

    // Set the kernel parameters.
    void* kernel_params[]{&device_vector_a, &device_vector_b, &device_vector_c,
                          &num_elements};
    // Launch the CUDA kernel.
    unsigned int const block_size_x{256};
    unsigned int const block_size_y{1};
    unsigned int const block_size_z{1};
    unsigned int const grid_size_x{(num_elements + block_size_x - 1) /
                                   block_size_x};
    unsigned int const grid_size_y{1};
    unsigned int const grid_size_z{1};
    unsigned int const shared_memory_size{0};
    CHECK_CUDA_DRIVER_ERROR(cuLaunchKernel(
        vector_add_kernel, grid_size_x, grid_size_y, grid_size_z, block_size_x,
        block_size_y, block_size_z, shared_memory_size, cuda_stream,
        kernel_params, nullptr));
    CHECK_CUDA_DRIVER_ERROR(cuStreamSynchronize(cuda_stream));

    // Copy the result vector from the device to the host.
    CHECK_CUDA_DRIVER_ERROR(cuMemcpyDtoH(host_vector_c.data(), device_vector_c,
                                         num_elements * sizeof(int)));

    // Verify the result.
    for (size_t i{0}; i < num_elements; ++i)
    {
        if (host_vector_c.at(i) != host_vector_c_reference.at(i))
        {
            std::cerr << "Error: The result is incorrect." << std::endl;
            return 1;
        }
    }
    std::cout << "Kernel ran successfully!\n";

    // Free device memory.
    CHECK_CUDA_DRIVER_ERROR(cuMemFree(device_vector_a));
    CHECK_CUDA_DRIVER_ERROR(cuMemFree(device_vector_b));
    CHECK_CUDA_DRIVER_ERROR(cuMemFree(device_vector_c));

    // Destroy the CUDA stream.
    CHECK_CUDA_DRIVER_ERROR(cuStreamDestroy(cuda_stream));

    // Destroy the CUDA module.
    CHECK_CUDA_DRIVER_ERROR(cuModuleUnload(cuda_module));

    // Destroy the CUDA context.
    CHECK_CUDA_DRIVER_ERROR(cuCtxDestroy(cuda_context));

    return 0;
}